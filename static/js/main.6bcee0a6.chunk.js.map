{"version":3,"sources":["logo.svg","CallApi/Post/Post.js","CallApi/CallApi.js","models/post.model.js","CallApi/Header/Header.js","CreatePost/CreatePost.js","Testing-search/List/List.js","Testing-search/Testing-search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","className","this","props","id","num","make","description","QTY","R","N","icon","faShekelSign","style","color","price","faSearchLocation","FirstFloor","secFloor","Component","CallApi","state","product","search","fetch","then","res","json","setState","console","log","e","target","value","type","placeholder","onChange","clickHandler","bind","filter","prod","includes","map","schema","yup","shape","title","min","max","required","image","tags","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","tabIndex","aria-disabled","List","filtered","handleChange","items","nextProps","newList","item","lc","toLowerCase","key","faHeart","onClick","delete","faTimes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bcee0a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './Post.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { faShekelSign ,faSearchLocation} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nclass Post extends Component {\n    render() {\n        return (\n                <div >\n                    <div className=\"card\" >\n                        <div>{this.props.id}</div>\n                        {/*<img src={this.props.thumbnailUrl} className=\"card-img-top\" alt=\"...\"/>*/}\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Part # :{this.props.num}</h5>\n                            <p className=\"card-text\">{this.props.make}</p>\n                            <p className=\"card-text\">{this.props.description}</p>\n                            <p className=\"card-text\">In Stock :{this.props.QTY}</p>\n                            <p className=\"card-text\">{this.props.R} {this.props.N}</p>\n                            <p className=\"card-text\">Price : <FontAwesomeIcon icon={faShekelSign} style={{color:\"blue\"}}/>{this.props.price}</p>\n                            <p className=\"card-text\"><FontAwesomeIcon icon={faSearchLocation} style={{color:\"blue\"}}/>{this.props.FirstFloor} / {this.props.secFloor}</p>\n                            {/*<a href=\"#\" className=\"btn btn-primary\">Go somewhere</a>*/}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport Post from \"./Post/Post\";\n\n\nclass CallApi extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            product:[],\n            search :\"\"\n        }\n\n    }\n\n    componentDidMount () {\n        fetch( './db.json' )\n            .then(res => res.json())\n            .then(product => {\n                this.setState({product});\n                console.log(product)\n            })\n\n    }\n     clickHandler (e){\n        if(e.target.value !==\"\"){\n            this.setState({search : e.target.value})\n        }\n\n     }\n\n\n\nrender() {\n        return (\n\n            <div>\n                <form className=\"form-inline my-2 my-lg-0\">\n                    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" onChange={this.clickHandler.bind(this)}/>\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                </form>\n                <div className=\"card-deck\">\n                    {this.state.product\n                        .filter(prod => prod.num.includes(this.state.search) )\n                        .map(product => {\n                            return <Post\n                                {...product}\n\n                            />\n                        })}\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CallApi;\n\n","import * as yup from 'yup';\n\nlet schema = yup.object().shape({\n\ttitle: yup.string().min(2).max(255).required(),\n\timage: yup.mixed().required(),\n\ttags: yup.string()\n});\n\nexport default schema;","import React, {Component} from 'react';\nimport CreatePost from \"../../CreatePost/CreatePost\";\n\nclass Header extends Component {\n    render() {\n        return (\n\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">Testing website</a>\n                    <div>Create post</div>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\"\n                            aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n                        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                            <li className=\"nav-item active\">\n                                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"#\">Link</a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link disabled\" href=\"#\" tabIndex=\"-1\"\n                                   aria-disabled=\"true\">Disabled</a>\n                            </li>\n                        </ul>\n\n                        {/*<form className=\"form-inline my-2 my-lg-0\">*/}\n                        {/*    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"/>*/}\n                        {/*        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>*/}\n                        {/*</form>*/}\n                    </div>\n                </nav>\n\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport postModel from '../models/post.model';\nimport './CreatePost.scss';\nimport { faCloudUploadAlt, faShare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport TagsInput from 'react-tagsinput';\n\nclass CreatePost extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttags: []\n\t\t};\n\t}\n\n\thandleTagsChange(tags) {\n\t\tthis.setState({\n\t\t\ttags: tags\n\t\t});\n\t}\n\n\tconvertToFormData(values) {\n\t\tconst data = new FormData();\n\t\tfor (let key in values) {\n\t\t\tArray.isArray(values[key])\n\t\t\t\t? values[key].forEach(value => data.append(key + '[]', value))\n\t\t\t\t: data.append(key, values[key]) ;\n\t\t}\n\t\treturn data;\n\t}\n\n\tsubmit(values) {\n\t\tconst formData = this.convertToFormData(values);\n\t\tfetch('./db.json', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData\n\t\t}).then(res => res.json())\n\t\t\t.then(post => console.log(post))\n\t\t\t.catch(err => console.log(err));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"CreatePost\">\n\t\t\t\t<h2>Create Post</h2>\n\t\t\t\t<Formik initialValues={{image: '', title: '', tags: []}}\n\t\t\t\t        validationSchema={postModel}\n\t\t\t\t        onSubmit={this.submit.bind(this)}\n\t\t\t\t\t\trender={({setFieldValue}) => {\n\t\t\t\t\t\t\treturn <Form className=\"col-xs-12 col-md-6\">\n\t\t\t\t\t\t\t\t<div className=\"row form-group\">\n\t\t\t\t\t\t\t\t\t<input type=\"file\" name=\"image\" id=\"image\" onChange={(event) => {\n\t\t\t\t\t\t\t\t\t\tsetFieldValue('image', event.currentTarget.files[0]);\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"image\" className=\"upload-button\">\n\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCloudUploadAlt} />\n\t\t\t\t\t\t\t\t\t\t\tSelect an image\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<div className=\"container-fluid row\">\n\t\t\t\t\t\t\t\t\t\t<ErrorMessage className=\"alert alert-danger mt-2\" name=\"image\" component=\"div\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row form-group\">\n\t\t\t\t\t\t\t\t\t<label>Title:</label>\n\n\n\t\t\t\t\t\t\t\t\t<Field as=\"textarea\" name=\"title\" className=\"form-control\" />\n\t\t\t\t\t\t\t\t\t<ErrorMessage className=\"alert alert-danger mt-2\" name=\"title\" component=\"div\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row form-group\">\n\t\t\t\t\t\t\t\t\t<label>Tags:</label>\n\t\t\t\t\t\t\t\t\t<TagsInput value={this.state.tags}\n\t\t\t\t\t\t\t\t\t           onChange={(tags) => {\n\t\t\t\t\t\t\t\t\t               this.handleTagsChange(tags);\n\t\t\t\t\t\t\t\t\t\t           setFieldValue('tags', tags);\n\t\t\t\t\t\t\t\t\t           }}\n\t\t\t\t\t\t\t\t\t           className=\"tags-wrapper\" />\n\t\t\t\t\t\t\t\t\t<ErrorMessage className=\"alert alert-danger mt-2\" name=\"tags\" component=\"div\" />\n\t\t\t\t\t\t\t\t\t<div><sub>Press Enter after inserting a tag</sub></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row form-group d-flex justify-content-end\">\n\t\t\t\t\t\t\t\t\t<Button type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faShare} />&nbsp;\n\t\t\t\t\t\t\t\t\t\tShare\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Form>;\n\t\t\t\t\t\t}}>\n\t\t\t\t</Formik>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CreatePost;","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filtered: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            filtered: this.props.items\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            filtered: nextProps.items\n        });\n    }\n\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n\n\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\n                <ul>\n                    {this.state.filtered.map(item => (\n                        <li key={item}><FontAwesomeIcon icon={faHeart} />\n                            {item} &nbsp;\n                            <span\n                                className=\"\"\n                                onClick={() => this.props.delete(item)}\n                            ><button><FontAwesomeIcon icon={faTimes} /> Delete</button></span>\n                        </li>\n                    ))}\n                </ul>\n\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, {Component} from 'react';\nimport List from \"./List/List\";\n\nclass TestingSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            list :[ \"go to the market\", \"jksrvhfkr\",\"hkrfvkrwe\" ]\n        }\n        this.addItem = this.addItem.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n\n\n    }\n    removeItem(item) {\n        // Put our list into an array\n        const list = this.state.list.slice();\n        // Check to see if item passed in matches item in array\n        list.some((el, i) => {\n            if (el === item) {\n                // If item matches, remove it from array\n                list.splice(i, 1);\n                return true;\n            }\n        });\n        // Set state to list\n        this.setState({\n            list: list\n        });\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n    addItem(e) {\n        // Prevent button click from submitting form\n        e.preventDefault();\n\n        // Create variables for our list, the item to add, and our form\n        let list = this.state.list;\n        const newItem = document.getElementById(\"addInput\");\n        const form = document.getElementById(\"addItemForm\");\n\n        // If our input has a value\n        if (newItem.value != \"\") {\n            // Add the new item to the end of our list array\n            list.push(newItem.value);\n            // Then we use that to set the state for list\n            this.setState({\n                list: list\n            });\n            // Finally, we need to reset the form\n            newItem.classList.remove(\"is-danger\");\n            form.reset();\n        } else {\n            // If the input doesn't have a value, make the border red since it's required\n            newItem.classList.add(\"is-danger\");\n        }\n    }\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"\">\n                <div className=\"container\">\n                    <section className=\"section\">\n                        <List items={this.state.list} delete={this.removeItem}\n                        />\n                    </section>\n                    <hr />\n                    <section className=\"section\">\n                        <form className=\"form\" id=\"addItemForm\">\n                            <input\n                                type=\"text\"\n                                className=\"input\"\n                                id=\"addInput\"\n                                // placeholder=\"Something that needs ot be done...\"\n                                onChange={this.handleChange} placeholder=\"New Content...\"\n                            />\n                            <button className=\"btn btn-primary btn-sm\" onClick={this.addItem}>\n                                Add Item\n                            </button>\n                        </form>\n                    </section>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default TestingSearch;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CallApi from \"./CallApi/CallApi\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Header from \"./CallApi/Header/Header\";\nimport TestingSearch from \"./Testing-search/Testing-search\";\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n\n        <Header/>\n        {/*<TestingSearch />*/}\n        <CallApi/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}